/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin.index'
import { Route as AdminReviewsImport } from './routes/admin/reviews'
import { Route as AdminReportsImport } from './routes/admin/reports'
import { Route as AdminMembersImport } from './routes/admin.members'
import { Route as AdminContentsImport } from './routes/admin/contents'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminReviewsRoute = AdminReviewsImport.update({
  id: '/reviews',
  path: '/reviews',
  getParentRoute: () => AdminRoute,
} as any)

const AdminReportsRoute = AdminReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => AdminRoute,
} as any)

const AdminMembersRoute = AdminMembersImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => AdminRoute,
} as any)

const AdminContentsRoute = AdminContentsImport.update({
  id: '/contents',
  path: '/contents',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/contents': {
      id: '/admin/contents'
      path: '/contents'
      fullPath: '/admin/contents'
      preLoaderRoute: typeof AdminContentsImport
      parentRoute: typeof AdminImport
    }
    '/admin/members': {
      id: '/admin/members'
      path: '/members'
      fullPath: '/admin/members'
      preLoaderRoute: typeof AdminMembersImport
      parentRoute: typeof AdminImport
    }
    '/admin/reports': {
      id: '/admin/reports'
      path: '/reports'
      fullPath: '/admin/reports'
      preLoaderRoute: typeof AdminReportsImport
      parentRoute: typeof AdminImport
    }
    '/admin/reviews': {
      id: '/admin/reviews'
      path: '/reviews'
      fullPath: '/admin/reviews'
      preLoaderRoute: typeof AdminReviewsImport
      parentRoute: typeof AdminImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminContentsRoute: typeof AdminContentsRoute
  AdminMembersRoute: typeof AdminMembersRoute
  AdminReportsRoute: typeof AdminReportsRoute
  AdminReviewsRoute: typeof AdminReviewsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminContentsRoute: AdminContentsRoute,
  AdminMembersRoute: AdminMembersRoute,
  AdminReportsRoute: AdminReportsRoute,
  AdminReviewsRoute: AdminReviewsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/contents': typeof AdminContentsRoute
  '/admin/members': typeof AdminMembersRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/reviews': typeof AdminReviewsRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/contents': typeof AdminContentsRoute
  '/admin/members': typeof AdminMembersRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/reviews': typeof AdminReviewsRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/contents': typeof AdminContentsRoute
  '/admin/members': typeof AdminMembersRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/reviews': typeof AdminReviewsRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/contents'
    | '/admin/members'
    | '/admin/reports'
    | '/admin/reviews'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/contents'
    | '/admin/members'
    | '/admin/reports'
    | '/admin/reviews'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/contents'
    | '/admin/members'
    | '/admin/reports'
    | '/admin/reviews'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/contents",
        "/admin/members",
        "/admin/reports",
        "/admin/reviews",
        "/admin/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/contents": {
      "filePath": "admin/contents.tsx",
      "parent": "/admin"
    },
    "/admin/members": {
      "filePath": "admin.members.tsx",
      "parent": "/admin"
    },
    "/admin/reports": {
      "filePath": "admin/reports.tsx",
      "parent": "/admin"
    },
    "/admin/reviews": {
      "filePath": "admin/reviews.tsx",
      "parent": "/admin"
    },
    "/admin/": {
      "filePath": "admin.index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
