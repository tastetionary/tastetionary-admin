/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin.index'
import { Route as AdminReviewsRouteImport } from './routes/admin/reviews'
import { Route as AdminReportsRouteImport } from './routes/admin/reports'
import { Route as AdminMembersRouteImport } from './routes/admin.members'
import { Route as AdminContentsRouteImport } from './routes/admin/contents'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminReviewsRoute = AdminReviewsRouteImport.update({
  id: '/reviews',
  path: '/reviews',
  getParentRoute: () => AdminRoute,
} as any)
const AdminReportsRoute = AdminReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => AdminRoute,
} as any)
const AdminMembersRoute = AdminMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContentsRoute = AdminContentsRouteImport.update({
  id: '/contents',
  path: '/contents',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/admin/contents': typeof AdminContentsRoute
  '/admin/members': typeof AdminMembersRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/reviews': typeof AdminReviewsRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/admin/contents': typeof AdminContentsRoute
  '/admin/members': typeof AdminMembersRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/reviews': typeof AdminReviewsRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/admin/contents': typeof AdminContentsRoute
  '/admin/members': typeof AdminMembersRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/reviews': typeof AdminReviewsRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/test'
    | '/admin/contents'
    | '/admin/members'
    | '/admin/reports'
    | '/admin/reviews'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/test'
    | '/admin/contents'
    | '/admin/members'
    | '/admin/reports'
    | '/admin/reviews'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/test'
    | '/admin/contents'
    | '/admin/members'
    | '/admin/reports'
    | '/admin/reviews'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
  TestRoute: typeof TestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/reviews': {
      id: '/admin/reviews'
      path: '/reviews'
      fullPath: '/admin/reviews'
      preLoaderRoute: typeof AdminReviewsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/reports': {
      id: '/admin/reports'
      path: '/reports'
      fullPath: '/admin/reports'
      preLoaderRoute: typeof AdminReportsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/members': {
      id: '/admin/members'
      path: '/members'
      fullPath: '/admin/members'
      preLoaderRoute: typeof AdminMembersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contents': {
      id: '/admin/contents'
      path: '/contents'
      fullPath: '/admin/contents'
      preLoaderRoute: typeof AdminContentsRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminContentsRoute: typeof AdminContentsRoute
  AdminMembersRoute: typeof AdminMembersRoute
  AdminReportsRoute: typeof AdminReportsRoute
  AdminReviewsRoute: typeof AdminReviewsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminContentsRoute: AdminContentsRoute,
  AdminMembersRoute: AdminMembersRoute,
  AdminReportsRoute: AdminReportsRoute,
  AdminReviewsRoute: AdminReviewsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
  TestRoute: TestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
